//comandos 

**Clase 1** 
--Crear un nuevo proyecto de laravel 8:

/* laravel new proyecto 
/* laravel new proyecto --jet   -> Añadimos Jetstream a la instalación de laravel.

**Clase 2** 
--En caso de querer generar los recursos de migración y factory:

/* php artisan make:model Model -mf
/* php artisan make:model Category -mf

---¿Qué es una migración?
Es la estructura de una tabla que debemos tener dentro de nuestro proyecto en laravel

--¿Qué es un factory?
Es la estructura de los datos, donde se almacenan datos de prueba para validar la construncción del proyecto.

--¿Qué es un modelo?
Es la representación de la tabla dentro de nuestro proyecto de laravel.

--En caso de que se haya borrado algun elemento de nuestro proyecto en laravel, utilizamos el comando:

/* composer install


--Para crear campos dentro de nuestro modelos, utilizamos la siguiente sintaxis:

/*  $table->tipoDeDato('nombreDelCampo');
/*  $table->string('name');

--Para generar una realción con una tabla, utilizamos el siguiente comando dentro de nuestro modelo:

/* $table-foreign('campoLlaveForenea')->references->on('tablaDeReferencia');
/* $table-foreign('user_id')->references->on('users');
 
 **Clase 3** 

 --¿Qué son los Datos Seed?
 Los datos Seed o semilla es información inicial(o de prueba) dentro de las tablas para validar su funcionalidad y realizar pruebas. 

 n-- Migración es la estructura de la tabla, los factories es la estructura de la generación de datos seed. 

--Para establecer la estructura de los datos dentro de nuestro factory, utilizamos la siguiente sintaxis:

/* 'nombreDelCampo' =>$this->faker->tipoDeDatoAGenerar
/* 'name' => $this->faker->word

Donde; 

• $this es la varible que hace referencia al factory donde definimos el dato.
• faker es el metodo para generar la información de prueba. 

--Si quieremos definir cuantos datos de prueba se van a crear, vamos al seeder/DatabaseSeeder-php y dentro de la funcion 'run' utilizamos el siguiente comando:

/* User::factory(10)->create();

Donde;

• User es el modelo al que hacemos referencia.
• factory es el metodo que conecta con el factory que configuramos anterioemente para extraer la estrucutura y generar los datos de prueba. 
• 10 es la cantidad de registros que deseamos generar. 


**Clase 4** 
--Generar una llave de encriptación:

/* php artisan key:generate 


--En caso de no tener jetstream instalado utilizamos el siguiente comando 

/* composer require laravel/jetstream 

-- proceso de implementación de jetstream en nuestro proyecto base de laravel

/* php artisan jetstream:install livewire

donde:

• livewire es la tecnologia a utilizar, la cual podemos cambiar por las que haya disponibles. 

--Para inicializar los elementos del frontend una vez tenemos jetstream instalado, usamos:

/* npm install [Instala node para la vista del front]
/* npm run dev [Ejecuta la configuración que tenemos en el archivo webpack.mix.js]

/* npm install & npm run dev [código simplificado]


**Clase 5**

n-- Fueron principalmente cambios dentro del código de las plantillas. 

**Clase 6**

Livewire - Interfaces dinamicas de forma simle y sencilla. 

--Creación de componentes livewire

/* php artisan make:livewire componente

n--Todos los componentes deben existir en un único contenedor o o div

**Clase 7 **

Diseño de componente - livewire
Creación de campor virtuales


**clase 8 **
Creación de página individual del curso

--crear controladores:

/* php artisan make:controller NombreControlador

** clase 9**
Lecciones
Se termino el listado de clases en la vista del curso individual

**clase 10**
Cursos similares


**Clase 11**
Componentes

--Para generar componentes dentro de nuestro proyecto, utilizamos el siguiente código:

/* php artisan make:component nombreComponente

Un Componente Blade es un código HTML sin mayor complejidad.

Un Componente Livewire puede tener dentro de si N cantidad de componentes Blade, además de su propia lógica. (En teoria)


**clase 12**
Jetstream - Personalización



